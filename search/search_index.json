{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastVector","text":"<p>This is a simple vector python package.</p>"},{"location":"api/","title":"References","text":""},{"location":"api/#vector-class","title":"Vector Class","text":""},{"location":"api/#fastvector.vector.Vector2D","title":"<code>Vector2D</code>","text":"Source code in <code>fastvector/vector.py</code> <pre><code>@total_ordering\nclass Vector2D:\n    def __init__(self, x: SupportsFloat = 0.0, y: SupportsFloat = 0.0) -&gt; None:\n\"\"\"Create a vector with the given x and y values.\n\n        Args:\n            x: x-Value.\n            y: y-Value.\n\n        Raises:\n            TypeError: If x or y are not a number.\n        \"\"\"\n        if isinstance(x, numbers.Real) and isinstance(y, numbers.Real):\n            self.x = x\n            self.y = y\n        else:\n            raise TypeError(\"You must pass in int/float value for x and y!\")\n\n    def __repr__(self) -&gt; str:\n\"\"\"Return the vector representation.\n\n        Returns:\n            The representation of the vector.\n        \"\"\"\n        return f\"vector.Vector2D({self.x}, {self.y})\"\n\n    def __str__(self) -&gt; str:\n\"\"\"The vector as a string.\n\n        Returns:\n            The vector as a string.\n        \"\"\"\n        return f\"({self.x}, {self.y})\"\n\n    def __abs__(self) -&gt; float:\n\"\"\"Return the length (magnitude) of the vector.\n\n        Returns:\n            Length of the vector.\n        \"\"\"\n        return sqrt(pow(self.x, 2) + pow(self.y, 2))\n\n    def __eq__(self, other_vector: object) -&gt; bool:\n\"\"\"Check if the vectors have the same values.\n\n        Args:\n            other_vector: Other vector (rhs)\n\n        Returns:\n            True, if the both vectors have the same values.\n            False, else.\n        \"\"\"\n        if not isinstance(other_vector, Vector2D):\n            return False\n        return self.x == other_vector.x and self.y == other_vector.y\n\n    def __lt__(self, other_vector: Vector2D) -&gt; bool:\n\"\"\"Check if the self is less than the other vector.\n\n        Args:\n            other_vector: Other vector (rhs).\n\n        Returns:\n            True, if the self is less than the other vector.\n            False, else.\n        \"\"\"\n        if not isinstance(other_vector, Vector2D):\n            raise TypeError(\"You must pass in a Vector2D instance!\")\n        return abs(self) &lt; abs(other_vector)\n\n    def __add__(self, other_vector: Vector2D) -&gt; Vector2D:\n\"\"\"Returns the addition vector of the self and the other vector.\n\n        Args:\n            other_vector: Other vector (rhs).\n\n        Returns:\n            The addition vector of the self and the other vector.\n        \"\"\"\n        if not isinstance(other_vector, Vector2D):\n            raise TypeError(\"You must pass in a Vector2D instance!\")\n        x = self.x + other_vector.x\n        y = self.y + other_vector.y\n        return Vector2D(x, y)\n\n    def __sub__(self, other_vector: Vector2D) -&gt; Vector2D:\n\"\"\"Return the subtraction vector of the self and the other vector.\n\n        Args:\n            other_vector: Other vector (rhs).\n\n        Returns:\n            The subtraction vector of the self and the other vector.\n        \"\"\"\n        if not isinstance(other_vector, Vector2D):\n            raise TypeError(\"You must pass in a Vector2D instance!\")\n        x = self.x - other_vector.x\n        y = self.y - other_vector.y\n        return Vector2D(x, y)\n\n    def __mul__(\n        self, other: Union[Vector2D, SupportsFloat]\n    ) -&gt; Union[Vector2D, SupportsFloat]:\n\"\"\"Return the multiplication of self and the other vector/number.\n\n        Args:\n            other: Other vector or scaler value (rhs)\n\n        Raises:\n            TypeError: Not int/float passed in.\n\n        Returns:\n            The multiplication of self and the other vector/number.\n        \"\"\"\n        if isinstance(other, Vector2D):\n            result: SupportsFloat = self.x * other.x + self.y * other.y\n            return result\n        if not isinstance(other, numbers.Real):\n            raise TypeError(\"You must pass in an int/float!\")\n        return Vector2D(self.x * other, self.y * other)\n\n    def __truediv__(self, other: SupportsFloat) -&gt; Vector2D:\n\"\"\"Return the multiplication of self and the other vector/number.\n\n        Args:\n            other: Other vector or scaler value (rhs).\n\n        Raises:\n            ValueError: Division by zero.\n            TypeError: Not int/float passed in.\n\n        Returns:\n            The multiplication of self and the other vector/number.\n        \"\"\"\n        if not isinstance(other, numbers.Real):\n            raise TypeError(\"You must pass in an int/float!\")\n        return Vector2D(self.x / other, self.y / other)\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__abs__","title":"<code>__abs__()</code>","text":"<p>Return the length (magnitude) of the vector.</p> <p>Returns:</p> Type Description <code>float</code> <p>Length of the vector.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __abs__(self) -&gt; float:\n\"\"\"Return the length (magnitude) of the vector.\n\n    Returns:\n        Length of the vector.\n    \"\"\"\n    return sqrt(pow(self.x, 2) + pow(self.y, 2))\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__add__","title":"<code>__add__(other_vector)</code>","text":"<p>Returns the addition vector of the self and the other vector.</p> <p>Parameters:</p> Name Type Description Default <code>other_vector</code> <code>Vector2D</code> <p>Other vector (rhs).</p> required <p>Returns:</p> Type Description <code>Vector2D</code> <p>The addition vector of the self and the other vector.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __add__(self, other_vector: Vector2D) -&gt; Vector2D:\n\"\"\"Returns the addition vector of the self and the other vector.\n\n    Args:\n        other_vector: Other vector (rhs).\n\n    Returns:\n        The addition vector of the self and the other vector.\n    \"\"\"\n    if not isinstance(other_vector, Vector2D):\n        raise TypeError(\"You must pass in a Vector2D instance!\")\n    x = self.x + other_vector.x\n    y = self.y + other_vector.y\n    return Vector2D(x, y)\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__eq__","title":"<code>__eq__(other_vector)</code>","text":"<p>Check if the vectors have the same values.</p> <p>Parameters:</p> Name Type Description Default <code>other_vector</code> <code>object</code> <p>Other vector (rhs)</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True, if the both vectors have the same values.</p> <code>bool</code> <p>False, else.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __eq__(self, other_vector: object) -&gt; bool:\n\"\"\"Check if the vectors have the same values.\n\n    Args:\n        other_vector: Other vector (rhs)\n\n    Returns:\n        True, if the both vectors have the same values.\n        False, else.\n    \"\"\"\n    if not isinstance(other_vector, Vector2D):\n        return False\n    return self.x == other_vector.x and self.y == other_vector.y\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__init__","title":"<code>__init__(x=0.0, y=0.0)</code>","text":"<p>Create a vector with the given x and y values.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>SupportsFloat</code> <p>x-Value.</p> <code>0.0</code> <code>y</code> <code>SupportsFloat</code> <p>y-Value.</p> <code>0.0</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If x or y are not a number.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __init__(self, x: SupportsFloat = 0.0, y: SupportsFloat = 0.0) -&gt; None:\n\"\"\"Create a vector with the given x and y values.\n\n    Args:\n        x: x-Value.\n        y: y-Value.\n\n    Raises:\n        TypeError: If x or y are not a number.\n    \"\"\"\n    if isinstance(x, numbers.Real) and isinstance(y, numbers.Real):\n        self.x = x\n        self.y = y\n    else:\n        raise TypeError(\"You must pass in int/float value for x and y!\")\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__lt__","title":"<code>__lt__(other_vector)</code>","text":"<p>Check if the self is less than the other vector.</p> <p>Parameters:</p> Name Type Description Default <code>other_vector</code> <code>Vector2D</code> <p>Other vector (rhs).</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True, if the self is less than the other vector.</p> <code>bool</code> <p>False, else.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __lt__(self, other_vector: Vector2D) -&gt; bool:\n\"\"\"Check if the self is less than the other vector.\n\n    Args:\n        other_vector: Other vector (rhs).\n\n    Returns:\n        True, if the self is less than the other vector.\n        False, else.\n    \"\"\"\n    if not isinstance(other_vector, Vector2D):\n        raise TypeError(\"You must pass in a Vector2D instance!\")\n    return abs(self) &lt; abs(other_vector)\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Return the multiplication of self and the other vector/number.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Union[Vector2D, SupportsFloat]</code> <p>Other vector or scaler value (rhs)</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>Not int/float passed in.</p> <p>Returns:</p> Type Description <code>Union[Vector2D, SupportsFloat]</code> <p>The multiplication of self and the other vector/number.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __mul__(\n    self, other: Union[Vector2D, SupportsFloat]\n) -&gt; Union[Vector2D, SupportsFloat]:\n\"\"\"Return the multiplication of self and the other vector/number.\n\n    Args:\n        other: Other vector or scaler value (rhs)\n\n    Raises:\n        TypeError: Not int/float passed in.\n\n    Returns:\n        The multiplication of self and the other vector/number.\n    \"\"\"\n    if isinstance(other, Vector2D):\n        result: SupportsFloat = self.x * other.x + self.y * other.y\n        return result\n    if not isinstance(other, numbers.Real):\n        raise TypeError(\"You must pass in an int/float!\")\n    return Vector2D(self.x * other, self.y * other)\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__repr__","title":"<code>__repr__()</code>","text":"<p>Return the vector representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>The representation of the vector.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Return the vector representation.\n\n    Returns:\n        The representation of the vector.\n    \"\"\"\n    return f\"vector.Vector2D({self.x}, {self.y})\"\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__str__","title":"<code>__str__()</code>","text":"<p>The vector as a string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The vector as a string.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"The vector as a string.\n\n    Returns:\n        The vector as a string.\n    \"\"\"\n    return f\"({self.x}, {self.y})\"\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__sub__","title":"<code>__sub__(other_vector)</code>","text":"<p>Return the subtraction vector of the self and the other vector.</p> <p>Parameters:</p> Name Type Description Default <code>other_vector</code> <code>Vector2D</code> <p>Other vector (rhs).</p> required <p>Returns:</p> Type Description <code>Vector2D</code> <p>The subtraction vector of the self and the other vector.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __sub__(self, other_vector: Vector2D) -&gt; Vector2D:\n\"\"\"Return the subtraction vector of the self and the other vector.\n\n    Args:\n        other_vector: Other vector (rhs).\n\n    Returns:\n        The subtraction vector of the self and the other vector.\n    \"\"\"\n    if not isinstance(other_vector, Vector2D):\n        raise TypeError(\"You must pass in a Vector2D instance!\")\n    x = self.x - other_vector.x\n    y = self.y - other_vector.y\n    return Vector2D(x, y)\n</code></pre>"},{"location":"api/#fastvector.vector.Vector2D.__truediv__","title":"<code>__truediv__(other)</code>","text":"<p>Return the multiplication of self and the other vector/number.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>SupportsFloat</code> <p>Other vector or scaler value (rhs).</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Division by zero.</p> <code>TypeError</code> <p>Not int/float passed in.</p> <p>Returns:</p> Type Description <code>Vector2D</code> <p>The multiplication of self and the other vector/number.</p> Source code in <code>fastvector/vector.py</code> <pre><code>def __truediv__(self, other: SupportsFloat) -&gt; Vector2D:\n\"\"\"Return the multiplication of self and the other vector/number.\n\n    Args:\n        other: Other vector or scaler value (rhs).\n\n    Raises:\n        ValueError: Division by zero.\n        TypeError: Not int/float passed in.\n\n    Returns:\n        The multiplication of self and the other vector/number.\n    \"\"\"\n    if not isinstance(other, numbers.Real):\n        raise TypeError(\"You must pass in an int/float!\")\n    return Vector2D(self.x / other, self.y / other)\n</code></pre>"}]}